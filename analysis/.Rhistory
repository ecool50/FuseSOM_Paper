label.x = 1.5, label = "p.format")
p <- ggpaired(res.melted, x = "Method", y = "value",
color = "Method", palette = "startrek",
add = "jitter", line.color = "gray",
line.size = 1, point.size = 3) +
labs(title = "", x = "", y = "ARI") +
theme_bw() +
theme(axis.text.x = element_text(size = 20),
axis.text.y = element_text(size = 20),
axis.title.y = element_text(size = 20),
axis.title.x = element_text(size = 20),
strip.text.x = element_text(size = 20),
legend.text = element_text(size = 20),
legend.title = element_text(size = 20),
plot.subtitle = element_text(size = 20)) +
stat_compare_means(paired = TRUE, size = 6,
label.x = 1.5, label = "p.format")
p
p <- ggpaired(res.melted, x = "Method", y = "value",
color = "Method", palette = "startrek",
add = "jitter", line.color = "gray",
line.size = 1, point.size = 3) +
labs(title = "", x = "", y = "ARI") +
theme_bw() +
theme(axis.text.x = element_text(size = 20),
axis.text.y = element_text(size = 20),
axis.title.y = element_text(size = 20),
axis.title.x = element_text(size = 20),
strip.text.x = element_text(size = 20),
legend.text = element_text(size = 20),
legend.title = element_text(size = 20),
plot.subtitle = element_text(size = 20)) +
stat_compare_means(paired = TRUE, size = 6,
label.x = 1.5, label = "p.format") +
facet_wrap(~variable)
p
View(res.melted)
p <- ggpaired(res.melted, x = "Method", y = "value",
color = "Method", palette = "startrek",
add = "jitter", line.color = "gray",
line.size = 1, point.size = 3, facet.by = 'variable') +
labs(title = "", x = "", y = "ARI") +
theme_bw() +
theme(axis.text.x = element_text(size = 20),
axis.text.y = element_text(size = 20),
axis.title.y = element_text(size = 20),
axis.title.x = element_text(size = 20),
strip.text.x = element_text(size = 20),
legend.text = element_text(size = 20),
legend.title = element_text(size = 20),
plot.subtitle = element_text(size = 20)) +
stat_compare_means(paired = TRUE, size = 6,
label.x = 1.5, label = "p.format") +
geom_line(aes(group = Method))
p
View(res.melted)
p <- ggpaired(res.melted, x = "Method", y = "value",
color = "Method", palette = "startrek",
add = "jitter", line.color = "gray",
line.size = 1, point.size = 3, facet.by = 'variable') +
labs(title = "", x = "", y = "ARI") +
theme_bw() +
theme(axis.text.x = element_text(size = 20),
axis.text.y = element_text(size = 20),
axis.title.y = element_text(size = 20),
axis.title.x = element_text(size = 20),
strip.text.x = element_text(size = 20),
legend.text = element_text(size = 20),
legend.title = element_text(size = 20),
plot.subtitle = element_text(size = 20)) +
stat_compare_means(paired = TRUE, size = 6,
label.x = 1.5, label = "p.format") +
geom_line(aes(group = Dataset))
p
p.box <- ggpaired(res.melted, x = "Method", y = "value",
color = "Method", palette = "startrek",
add = "jitter", line.color = "gray",
line.size = 1, point.size = 3, facet.by = 'variable') +
labs(title = "", x = "", y = "ARI") +
theme_bw() +
theme(axis.text.x = element_text(size = 20),
axis.text.y = element_text(size = 20),
axis.title.y = element_text(size = 20),
axis.title.x = element_text(size = 20),
strip.text.x = element_text(size = 20),
legend.text = element_text(size = 20),
legend.title = element_text(size = 20),
plot.subtitle = element_text(size = 20)) +
stat_compare_means(paired = TRUE, size = 6,
label.x = 1.5, label = "p.format") +
geom_line(aes(group = Dataset), alpha = 0.1)
p.final <- plot_grid(p.bar.final, p.box.all, labels = c('A', 'B'), rel_widths = c(5/10, 5/10))
p.box.all <- ggpaired(res.melted, x = "Method", y = "value",
color = "Method", palette = "startrek",
add = "jitter", line.color = "gray",
line.size = 1, point.size = 3, facet.by = 'variable') +
labs(title = "", x = "", y = "ARI") +
theme_bw() +
theme(axis.text.x = element_text(size = 20),
axis.text.y = element_text(size = 20),
axis.title.y = element_text(size = 20),
axis.title.x = element_text(size = 20),
strip.text.x = element_text(size = 20),
legend.text = element_text(size = 20),
legend.title = element_text(size = 20),
plot.subtitle = element_text(size = 20)) +
stat_compare_means(paired = TRUE, size = 6,
label.x = 1.5, label = "p.format") +
geom_line(aes(group = Dataset), alpha = 0.1)
p.final <- plot_grid(p.bar.final, p.box.all, labels = c('A', 'B'), rel_widths = c(5/10, 5/10))
p.final
knitr::opts_chunk$set(echo = TRUE)
profile_results <- read.csv('method_timing_results.csv')
profile_results <- read.csv('/home/ewillie/Documents/PhD/Spatial_Clustering/clustering/method_timing_results.csv')
profile_results[profile_results$Method == 'PhenGraph', ]$Method <- 'PhenoGraph'
colnames(profile_results) <- c('Size', 'Method', 'Score')
p <- profile_results %>%
ggplot(aes(x = Size/1e4, y = Score)) +
geom_point(aes(color = Method), size = 3) +
theme_bw() +
labs(title = "", x = "Number of cells (*10K)", y = "Total time (seconds)") +
theme(axis.text.x = element_text(size = 20),
axis.text.y = element_text(size = 20),
axis.title.y = element_text(size = 20),
axis.title.x = element_text(size = 20),
strip.text.x = element_text(size = 20),
legend.text = element_text(size = 20),
legend.title = element_text(size = 20),
legend.position = "none") +
scale_fill_startrek()
p
profile_results <- read.csv('/home/ewillie/Documents/PhD/Spatial_Clustering/clustering/method_timing_results.csv')
profile_results[profile_results$Method == 'PhenGraph', ]$Method <- 'PhenoGraph'
colnames(profile_results) <- c('Size', 'Method', 'Score')
p.time <- profile_results %>%
ggplot(aes(x = Size/1e4, y = Score)) +
geom_point(aes(color = Method), size = 3) +
theme_bw() +
labs(title = "", x = "Number of cells (*10K)", y = "Total time (seconds)") +
theme(axis.text.x = element_text(size = 20),
axis.text.y = element_text(size = 20),
axis.title.y = element_text(size = 20),
axis.title.x = element_text(size = 20),
strip.text.x = element_text(size = 20),
legend.text = element_text(size = 20),
legend.title = element_text(size = 20),
legend.position = "none") +
scale_fill_startrek()
p.time
memory_results <- read.csv('/home/ewillie/Documents/PhD/Spatial_Clustering/clustering/method_memory_results.csv')
colnames(memory_results) <- c('Size', 'Method', 'Score')
memory_results$Method <- if_else(memory_results$Method == 'PhenGraph',
'PhenoGraph', memory_results$Method)
p.mem <- memory_results %>%
ggplot(aes(x = Size/1e4, y = Score)) +
geom_point(aes(color = Method), size = 3) +
theme_bw() +
labs(title = "", x = "Number of cells (*10K)", y = "Total meomory (GB)") +
theme(axis.text.x = element_text(size = 20),
axis.text.y = element_text(size = 20),
axis.title.y = element_text(size = 20),
axis.title.x = element_text(size = 20),
strip.text.x = element_text(size = 20),
legend.text = element_text(size = 20),
legend.title = element_text(size = 20)) +
scale_fill_startrek()
p.mem
cowplot::plot_grid(p, p.mem, rel_widths = c(4/10, 6/10), labels = c('A', 'B'))
knitr::opts_chunk$set(echo = TRUE)
rm(list = ls())
gc()
library(tidyverse)  # data manipulation
library(ggplot2)
library(data.table)
# library(rnndescent)
# library(imcdatasets)
library(flowAssist)
library(FlowSOM)
library(Rcpp)
library(parallel)
library(dplyr)
library(psych)
library(analogue)
# library(ggstatsplot)
library(ggsci)
library(rcartocolor)
library(FuseSOM)
set.seed(1994)
library(miceadds)
source.all('/home/ewillie/Documents/PhD/Spatial_Clustering/clustering/scripts/')
# write.csv(res, '~/Documents/PhD/Spatial_Clustering/clustering/FuseSOM_weighting_results.csv',
#           row.names = F)
res <- read.csv('~/Documents/PhD/Spatial_Clustering/clustering/FuseSOM_weighting_results.csv',
check.names = F)
res.melted <- melt(res)
colnames(res.melted) <- c('Method','Dataset', 'Metric', 'Score')
p.weight <- ggplot(res.melted, aes(x=Method, y=Score)) +
geom_boxplot(aes(fill = Method)) +
facet_wrap(~Metric) +
labs(title = "", x = "", y = "Score") +
theme_bw() +
theme(axis.text.x = element_text(angle = 90,
vjust = 0.5, hjust=1,
size = 20),
axis.text.y = element_text(size = 20),
axis.title.y = element_text(size = 20),
axis.title.x = element_text(size = 20),
strip.text.x = element_text(size = 20),
legend.text = element_text(size = 20),
legend.title = element_text(size = 20)) +
scale_fill_jama()
p.weight
# write.csv(res, '~/Documents/PhD/Spatial_Clustering/clustering/FuseSOM_weighting_results.csv',
#           row.names = F)
res <- read.csv('~/Documents/PhD/Spatial_Clustering/clustering/FuseSOM_weighting_results.csv',
check.names = F)
res.melted <- melt(res)
colnames(res.melted) <- c('Method','Dataset', 'Metric', 'Score')
p.weight <- ggplot(res.melted, aes(x=Method, y=Score)) +
geom_boxplot(aes(fill = Method)) +
facet_wrap(~Metric) + geom_jitter() +
labs(title = "", x = "", y = "Score") +
theme_bw() +
theme(axis.text.x = element_text(angle = 90,
vjust = 0.5, hjust=1,
size = 20),
axis.text.y = element_text(size = 20),
axis.title.y = element_text(size = 20),
axis.title.x = element_text(size = 20),
strip.text.x = element_text(size = 20),
legend.text = element_text(size = 20),
legend.title = element_text(size = 20)) +
scale_fill_jama()
p.weight
View(customWeighting)
profile_results <- read.csv('/home/ewillie/Documents/PhD/Spatial_Clustering/clustering/method_timing_results.csv')
profile_results[profile_results$Method == 'PhenGraph', ]$Method <- 'PhenoGraph'
colnames(profile_results) <- c('Size', 'Method', 'Score')
p.time <- profile_results %>%
ggplot(aes(x = Size/1e4, y = Score)) +
geom_point(aes(color = Method), size = 3) +
theme_bw() +
labs(title = "", x = "Number of cells (*10K)", y = "Total time (seconds)") +
theme(axis.text.x = element_text(size = 20),
axis.text.y = element_text(size = 20),
axis.title.y = element_text(size = 20),
axis.title.x = element_text(size = 20),
strip.text.x = element_text(size = 20),
legend.text = element_text(size = 20),
legend.title = element_text(size = 20),
legend.position = "none") +
scale_fill_jama()
p.time
profile_results <- read.csv('/home/ewillie/Documents/PhD/Spatial_Clustering/clustering/method_timing_results.csv')
profile_results[profile_results$Method == 'PhenGraph', ]$Method <- 'PhenoGraph'
colnames(profile_results) <- c('Size', 'Method', 'Score')
p.time <- profile_results %>%
ggplot(aes(x = Size/1e4, y = Score)) +
geom_point(aes(color = Method), size = 3) +
theme_bw() +
labs(title = "", x = "Number of cells (*10K)", y = "Total time (seconds)") +
theme(axis.text.x = element_text(size = 20),
axis.text.y = element_text(size = 20),
axis.title.y = element_text(size = 20),
axis.title.x = element_text(size = 20),
strip.text.x = element_text(size = 20),
legend.text = element_text(size = 20),
legend.title = element_text(size = 20),
legend.position = "none") +
scale_fill_jama()
p.time
p.time
profile_results <- read.csv('/home/ewillie/Documents/PhD/Spatial_Clustering/clustering/method_timing_results.csv')
profile_results[profile_results$Method == 'PhenGraph', ]$Method <- 'PhenoGraph'
colnames(profile_results) <- c('Size', 'Method', 'Score')
p.time <- profile_results %>%
ggplot(aes(x = Size/1e4, y = Score)) +
geom_point(aes(color = Method), size = 3) +
theme_bw() +
labs(title = "", x = "Number of cells (*10K)", y = "Total time (seconds)") +
theme(axis.text.x = element_text(size = 20),
axis.text.y = element_text(size = 20),
axis.title.y = element_text(size = 20),
axis.title.x = element_text(size = 20),
strip.text.x = element_text(size = 20),
legend.text = element_text(size = 20),
legend.title = element_text(size = 20),
legend.position = "none") +
scale_color_jama()
p.time
profile_results <- read.csv('/home/ewillie/Documents/PhD/Spatial_Clustering/clustering/method_timing_results.csv')
profile_results[profile_results$Method == 'PhenGraph', ]$Method <- 'PhenoGraph'
colnames(profile_results) <- c('Size', 'Method', 'Score')
p.time <- profile_results %>%
ggplot(aes(x = Size/1e4, y = Score)) +
geom_point(aes(color = Method), size = 3) +
theme_bw() +
labs(title = "", x = "Number of cells (*10K)", y = "Total time (seconds)") +
theme(axis.text.x = element_text(size = 20),
axis.text.y = element_text(size = 20),
axis.title.y = element_text(size = 20),
axis.title.x = element_text(size = 20),
strip.text.x = element_text(size = 20),
legend.text = element_text(size = 20),
legend.title = element_text(size = 20),
legend.position = "none") +
scale_color_jama()
p.time
memory_results <- read.csv('/home/ewillie/Documents/PhD/Spatial_Clustering/clustering/method_memory_results.csv')
colnames(memory_results) <- c('Size', 'Method', 'Score')
memory_results$Method <- if_else(memory_results$Method == 'PhenGraph',
'PhenoGraph', memory_results$Method)
p.mem <- memory_results %>%
ggplot(aes(x = Size/1e4, y = Score)) +
geom_point(aes(color = Method), size = 3) +
theme_bw() +
labs(title = "", x = "Number of cells (*10K)", y = "Total meomory (GB)") +
theme(axis.text.x = element_text(size = 20),
axis.text.y = element_text(size = 20),
axis.title.y = element_text(size = 20),
axis.title.x = element_text(size = 20),
strip.text.x = element_text(size = 20),
legend.text = element_text(size = 20),
legend.title = element_text(size = 20)) +
scale_color_jama()
p.mem
cowplot::plot_grid(p, p.mem, rel_widths = c(4/10, 6/10), labels = c('A', 'B'))
cowplot::plot_grid(p.time, p.mem, rel_widths = c(4/10, 6/10), labels = c('A', 'B'))
# write.csv(res, '~/Documents/PhD/Spatial_Clustering/clustering/FuseSOM_weighting_results.csv',
#           row.names = F)
res <- read.csv('~/Documents/PhD/Spatial_Clustering/clustering/FuseSOM_weighting_results.csv',
check.names = F)
res.melted <- melt(res)
colnames(res.melted) <- c('Method','Dataset', 'Metric', 'Score')
p.weight <- ggplot(res.melted, aes(x=Method, y=Score)) +
geom_boxplot(aes(fill = Method)) +
facet_wrap(~Metric) + geom_jitter(size = 1) +
labs(title = "", x = "", y = "Score") +
theme_bw() +
theme(axis.text.x = element_text(angle = 90,
vjust = 0.5, hjust=1,
size = 20),
axis.text.y = element_text(size = 20),
axis.title.y = element_text(size = 20),
axis.title.x = element_text(size = 20),
strip.text.x = element_text(size = 20),
legend.text = element_text(size = 20),
legend.title = element_text(size = 20)) +
scale_fill_jama()
p.weight
View(p.weight)
# write.csv(res, '~/Documents/PhD/Spatial_Clustering/clustering/FuseSOM_weighting_results.csv',
#           row.names = F)
res <- read.csv('~/Documents/PhD/Spatial_Clustering/clustering/FuseSOM_weighting_results.csv',
check.names = F)
res.melted <- melt(res)
colnames(res.melted) <- c('Method','Dataset', 'Metric', 'Score')
p.weight <- ggplot(res.melted, aes(x=Method, y=Score)) +
geom_boxplot(aes(fill = Method)) +
facet_wrap(~Metric) + geom_jitter(size = 1) +
labs(title = "", x = "", y = "Score") +
theme_bw() +
theme(axis.text.x = element_text(angle = 90,
vjust = 0.5, hjust=1,
size = 20),
axis.text.y = element_text(size = 20, colour = 'black'),
axis.title.y = element_text(size = 20, colour = 'black'),
axis.title.x = element_text(size = 20, colour = 'black'),
strip.text.x = element_text(size = 20, colour = 'black'),
legend.text = element_text(size = 20, colour = 'black'),
legend.title = element_text(size = 20, colour = 'black')) +
scale_fill_jama()
p.weight
res <- read.csv('~/Documents/PhD/Spatial_Clustering/clustering/clust_est_analysis.csv')
colnames(res)[[3]] <- "FM-Index"
res.re <- res %>% dplyr::select(Method, RE, Dataset) %>% as.data.frame() %>%
melt(id.var = c('Dataset','Method'))
colnames(res.re) <- c('Dataset', 'Method', 'RE' ,'Relative-Error')
# res.melted$`Relative Error` <- as.numeric(res.melted$`Relative Error`)
p.RE <- ggpaired(res.re, x= 'Method', y = '`Relative-Error`',
fill = 'Method', add = 'jitter', palette = 'jama',
point.size = 1) +
labs(title="",
x ="Cluster Estimation Method", y = "Relative Error") + theme_bw() +
theme(
plot.title = element_text(color="Black", size=20, hjust = 0.5),
plot.subtitle = element_text(color = "red", size = 20, face = "bold", hjust = 0.5),
axis.title.x = element_text(color="Black", size=20),
axis.title.y = element_text(color="Black", size=20),
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1, size = 25),
axis.text.y = element_text(size = 20),
legend.position = "none"
) +
geom_hline(yintercept=0, linetype='dotted', col = 'red', linewidth = 2)
p.RE
res <- read.csv('~/Documents/PhD/Spatial_Clustering/clustering/clust_est_analysis.csv')
colnames(res)[[3]] <- "FM-Index"
res.re <- res %>% dplyr::select(Method, RE, Dataset) %>% as.data.frame() %>%
melt(id.var = c('Dataset','Method'))
colnames(res.re) <- c('Dataset', 'Method', 'RE' ,'Relative-Error')
# res.melted$`Relative Error` <- as.numeric(res.melted$`Relative Error`)
p.RE <- ggpaired(res.re, x= 'Method', y = '`Relative-Error`',
fill = 'Method', add = 'jitter', palette = 'jama',
point.size = 1) +
labs(title="",
x ="Cluster Estimation Method", y = "Relative Error") + theme_bw() +
theme(
plot.title = element_text(color="Black", size=20, hjust = 0.5),
plot.subtitle = element_text(color = "red", size = 20, face = "bold", hjust = 0.5),
axis.title.x = element_text(color="Black", size=20),
axis.title.y = element_text(color="Black", size=20),
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1, size = 25),
axis.text.y = element_text(size = 20),
legend.position = "none"
) +
geom_hline(yintercept=0, linetype='dotted', col = 'red', linewidth = 1)
p.RE
res.metrics <- res %>% dplyr::select(Method, Dataset, ARI, NMI, `FM-Index`, FMeasure) %>%
as.data.frame() %>%
melt(id.var = c('Dataset','Method'))
colnames(res.metrics) <- c('Dataset', 'Method', 'Metric' ,'Score')
p.metrics <-ggpaired(res.metrics, x= 'Method', y = 'Score',
fill = 'Method', add = 'jitter', palette = 'jama',
point.size = 1, facet.by = 'Metric') +
labs(title="",
x ="Cluster Estimation Method", y = "Score") + theme_bw() +
theme(
plot.title = element_text(color="Black", size=25, hjust = 0.5),
plot.subtitle = element_text(color = "red", size = 25, face = "bold", hjust = 0.5),
axis.title.x = element_text(color="Black", size=25),
axis.title.y = element_text(color="Black", size=25),
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1, size = 25),
axis.text.y = element_text(size = 25),
legend.text = element_text(size = 25),
legend.title = element_text(size = 25),
)
p.metrics
res.metrics <- res %>% dplyr::select(Method, Dataset, ARI, NMI, `FM-Index`, FMeasure) %>%
as.data.frame() %>%
melt(id.var = c('Dataset','Method'))
colnames(res.metrics) <- c('Dataset', 'Method', 'Metric' ,'Score')
p.metrics <-ggpaired(res.metrics, x= 'Method', y = 'Score',
fill = 'Method', add = 'jitter', palette = 'jama',
point.size = 1, facet.by = 'Metric') +
labs(title="",
x ="Cluster Estimation Method", y = "Score") + theme_bw() +
theme(
plot.title = element_text(color="Black", size=20, hjust = 0.5),
plot.subtitle = element_text(color = "red", size = 20, face = "bold", hjust = 0.5),
axis.title.x = element_text(color="Black", size=20),
axis.title.y = element_text(color="Black", size=20),
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1, size = 20),
axis.text.y = element_text(size = 20),
legend.text = element_text(size = 20),
legend.title = element_text(size = 20),
)
p.metrics
cowplot::plot_grid(p.RE, p.metrics, labels = c('A','B'), rel_widths = c(2/5, 3/5))
res.metrics <- res %>% dplyr::select(Method, Dataset, ARI, NMI, `FM-Index`, FMeasure) %>%
as.data.frame() %>%
melt(id.var = c('Dataset','Method'))
colnames(res.metrics) <- c('Dataset', 'Method', 'Metric' ,'Score')
p.metrics <-ggpaired(res.metrics, x= 'Method', y = 'Score',
fill = 'Method', add = 'jitter', palette = 'jama',
point.size = 1, facet.by = 'Metric') +
labs(title="",
x ="Cluster Estimation Method", y = "Score") + theme_bw() +
theme(
plot.title = element_text(color="Black", size=20, hjust = 0.5),
plot.subtitle = element_text(color = "red", size = 20, face = "bold", hjust = 0.5),
axis.title.x = element_text(color="Black", size=20),
axis.title.y = element_text(color="Black", size=20),
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1, size = 20),
axis.text.y = element_text(size = 20),
legend.text = element_text(size = 20),
legend.title = element_text(size = 20),
strip.text.x = element_text(size = 20, colour = 'black')
)
p.metrics
cowplot::plot_grid(p.RE, p.metrics, labels = c('A','B'), rel_widths = c(2/5, 3/5))
knitr::opts_chunk$set(echo = FALSE, cache = TRUE)
knitr::opts_chunk$set(warning = FALSE, message = TRUE)
knitr::opts_chunk$set(fig.width=10, fig.height=6)
rm(list = ls())
gc()
suppressPackageStartupMessages({
library(reticulate)
library(keras)
library(tidyverse)
library(FuseSOM)
library(ggsci)
library(uwot)
})
k = backend()     # this where the software used to break
knitr::opts_chunk$set(echo = TRUE)
rm(list = ls())
gc()
suppressPackageStartupMessages({
library(reticulate)
library(keras)
library(tidyverse)
library(FuseSOM)
library(ggsci)
library(uwot)
})
k = backend()     # this where the software used to break
install.packages("keras")
install.packages("keras")
install.packages("keras")
keras::install_keras()
pip install --upgrade pip
keras::install_keras()
